// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGFMsgBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SGFMsgBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SGFMsg {

namespace {

const ::google::protobuf::Descriptor* Ident_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ident_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyString_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgURLParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgURLParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeverStateReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeverStateReport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SGFMsgBase_2eproto() {
  protobuf_AddDesc_SGFMsgBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SGFMsgBase.proto");
  GOOGLE_CHECK(file != NULL);
  Ident_descriptor_ = file->message_type(0);
  static const int Ident_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, index_),
  };
  Ident_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ident_descriptor_,
      Ident::default_instance_,
      Ident_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ident));
  PropertyInt_descriptor_ = file->message_type(1);
  static const int PropertyInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, data_),
  };
  PropertyInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyInt_descriptor_,
      PropertyInt::default_instance_,
      PropertyInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyInt));
  PropertyString_descriptor_ = file->message_type(2);
  static const int PropertyString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, data_),
  };
  PropertyString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyString_descriptor_,
      PropertyString::default_instance_,
      PropertyString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyString));
  PropertyObject_descriptor_ = file->message_type(3);
  static const int PropertyObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, data_),
  };
  PropertyObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertyObject_descriptor_,
      PropertyObject::default_instance_,
      PropertyObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertyObject));
  MsgBase_descriptor_ = file->message_type(4);
  static const int MsgBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_client_list_),
  };
  MsgBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBase_descriptor_,
      MsgBase::default_instance_,
      MsgBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBase));
  MsgURLParam_descriptor_ = file->message_type(5);
  static const int MsgURLParam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, strurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, strgetparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, strpostdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, ntimeoutms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, strrspdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, nret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, nreqid_),
  };
  MsgURLParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgURLParam_descriptor_,
      MsgURLParam::default_instance_,
      MsgURLParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgURLParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgURLParam));
  SeverStateReport_descriptor_ = file->message_type(6);
  static const int SeverStateReport_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_max_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_cur_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, server_type_),
  };
  SeverStateReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeverStateReport_descriptor_,
      SeverStateReport::default_instance_,
      SeverStateReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeverStateReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeverStateReport));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SGFMsgBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ident_descriptor_, &Ident::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyInt_descriptor_, &PropertyInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyString_descriptor_, &PropertyString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertyObject_descriptor_, &PropertyObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBase_descriptor_, &MsgBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgURLParam_descriptor_, &MsgURLParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeverStateReport_descriptor_, &SeverStateReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SGFMsgBase_2eproto() {
  delete Ident::default_instance_;
  delete Ident_reflection_;
  delete PropertyInt::default_instance_;
  delete PropertyInt_reflection_;
  delete PropertyString::default_instance_;
  delete PropertyString_reflection_;
  delete PropertyObject::default_instance_;
  delete PropertyObject_reflection_;
  delete MsgBase::default_instance_;
  delete MsgBase_reflection_;
  delete MsgURLParam::default_instance_;
  delete MsgURLParam_reflection_;
  delete SeverStateReport::default_instance_;
  delete SeverStateReport_reflection_;
}

void protobuf_AddDesc_SGFMsgBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SGFMsgBase.proto\022\006SGFMsg\"%\n\005Ident\022\r\n\005s"
    "vrid\030\001 \002(\003\022\r\n\005index\030\002 \002(\003\"2\n\013PropertyInt"
    "\022\025\n\rproperty_name\030\001 \002(\014\022\014\n\004data\030\002 \002(\003\"5\n"
    "\016PropertyString\022\025\n\rproperty_name\030\001 \002(\014\022\014"
    "\n\004data\030\002 \002(\014\"D\n\016PropertyObject\022\025\n\rproper"
    "ty_name\030\001 \002(\014\022\033\n\004data\030\002 \002(\0132\r.SGFMsg.Ide"
    "nt\"h\n\007MsgBase\022 \n\tplayer_id\030\001 \002(\0132\r.SGFMs"
    "g.Ident\022\020\n\010msg_data\030\002 \002(\014\022)\n\022player_Clie"
    "nt_list\030\003 \003(\0132\r.SGFMsg.Ident\"\216\001\n\013MsgURLP"
    "aram\022\016\n\006strUrl\030\001 \002(\014\022\024\n\014strGetParams\030\002 \001"
    "(\014\022\023\n\013strPostData\030\003 \001(\014\022\022\n\nnTimeOutMS\030\004 "
    "\001(\005\022\022\n\nstrRspData\030\005 \001(\014\022\014\n\004nRet\030\006 \001(\005\022\016\n"
    "\006nReqID\030\007 \001(\005\"\302\001\n\020SeverStateReport\022\021\n\tse"
    "rver_id\030\001 \002(\005\022\023\n\013server_name\030\002 \002(\014\022\021\n\tse"
    "rver_ip\030\003 \002(\014\022\023\n\013server_port\030\004 \002(\005\022\031\n\021se"
    "rver_max_online\030\005 \001(\005\022\030\n\020server_cur_coun"
    "t\030\006 \001(\005\022\024\n\014server_state\030\007 \001(\005\022\023\n\013server_"
    "type\030\010 \001(\005", 690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SGFMsgBase.proto", &protobuf_RegisterTypes);
  Ident::default_instance_ = new Ident();
  PropertyInt::default_instance_ = new PropertyInt();
  PropertyString::default_instance_ = new PropertyString();
  PropertyObject::default_instance_ = new PropertyObject();
  MsgBase::default_instance_ = new MsgBase();
  MsgURLParam::default_instance_ = new MsgURLParam();
  SeverStateReport::default_instance_ = new SeverStateReport();
  Ident::default_instance_->InitAsDefaultInstance();
  PropertyInt::default_instance_->InitAsDefaultInstance();
  PropertyString::default_instance_->InitAsDefaultInstance();
  PropertyObject::default_instance_->InitAsDefaultInstance();
  MsgBase::default_instance_->InitAsDefaultInstance();
  MsgURLParam::default_instance_->InitAsDefaultInstance();
  SeverStateReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SGFMsgBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SGFMsgBase_2eproto {
  StaticDescriptorInitializer_SGFMsgBase_2eproto() {
    protobuf_AddDesc_SGFMsgBase_2eproto();
  }
} static_descriptor_initializer_SGFMsgBase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Ident::kSvridFieldNumber;
const int Ident::kIndexFieldNumber;
#endif  // !_MSC_VER

Ident::Ident()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ident::InitAsDefaultInstance() {
}

Ident::Ident(const Ident& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ident::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = GOOGLE_LONGLONG(0);
  index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ident::~Ident() {
  SharedDtor();
}

void Ident::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ident::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ident::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ident_descriptor_;
}

const Ident& Ident::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

Ident* Ident::default_instance_ = NULL;

Ident* Ident::New() const {
  return new Ident;
}

void Ident::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = GOOGLE_LONGLONG(0);
    index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 svrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 svrid = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->svrid(), output);
  }

  // required int64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ident::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 svrid = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->svrid(), target);
  }

  // required int64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ident::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 svrid = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->svrid());
    }

    // required int64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ident::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ident* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ident*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ident::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Ident::Swap(Ident* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ident::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ident_descriptor_;
  metadata.reflection = Ident_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyInt::kPropertyNameFieldNumber;
const int PropertyInt::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyInt::PropertyInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyInt::InitAsDefaultInstance() {
}

PropertyInt::PropertyInt(const PropertyInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyInt::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyInt::~PropertyInt() {
  SharedDtor();
}

void PropertyInt::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
  }
}

void PropertyInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyInt_descriptor_;
}

const PropertyInt& PropertyInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

PropertyInt* PropertyInt::default_instance_ = NULL;

PropertyInt* PropertyInt::New() const {
  return new PropertyInt;
}

void PropertyInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }

      // required int64 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required int64 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required int64 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required int64 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropertyInt::Swap(PropertyInt* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyInt_descriptor_;
  metadata.reflection = PropertyInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyString::kPropertyNameFieldNumber;
const int PropertyString::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyString::PropertyString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyString::InitAsDefaultInstance() {
}

PropertyString::PropertyString(const PropertyString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyString::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyString::~PropertyString() {
  SharedDtor();
}

void PropertyString::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PropertyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyString_descriptor_;
}

const PropertyString& PropertyString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

PropertyString* PropertyString::default_instance_ = NULL;

PropertyString* PropertyString::New() const {
  return new PropertyString;
}

void PropertyString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PropertyString::Swap(PropertyString* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyString_descriptor_;
  metadata.reflection = PropertyString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertyObject::kPropertyNameFieldNumber;
const int PropertyObject::kDataFieldNumber;
#endif  // !_MSC_VER

PropertyObject::PropertyObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertyObject::InitAsDefaultInstance() {
  data_ = const_cast< ::SGFMsg::Ident*>(&::SGFMsg::Ident::default_instance());
}

PropertyObject::PropertyObject(const PropertyObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertyObject::SharedCtor() {
  _cached_size_ = 0;
  property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyObject::~PropertyObject() {
  SharedDtor();
}

void PropertyObject::SharedDtor() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void PropertyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyObject_descriptor_;
}

const PropertyObject& PropertyObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

PropertyObject* PropertyObject::default_instance_ = NULL;

PropertyObject* PropertyObject::New() const {
  return new PropertyObject;
}

void PropertyObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property_name()) {
      if (property_name_ != &::google::protobuf::internal::kEmptyString) {
        property_name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::SGFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .SGFMsg.Ident data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->property_name(), output);
  }

  // required .SGFMsg.Ident data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertyObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes property_name = 1;
  if (has_property_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .SGFMsg.Ident data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertyObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes property_name = 1;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->property_name());
    }

    // required .SGFMsg.Ident data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertyObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertyObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_data()) {
      mutable_data()->::SGFMsg::Ident::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertyObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void PropertyObject::Swap(PropertyObject* other) {
  if (other != this) {
    std::swap(property_name_, other->property_name_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertyObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyObject_descriptor_;
  metadata.reflection = PropertyObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBase::kPlayerIdFieldNumber;
const int MsgBase::kMsgDataFieldNumber;
const int MsgBase::kPlayerClientListFieldNumber;
#endif  // !_MSC_VER

MsgBase::MsgBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBase::InitAsDefaultInstance() {
  player_id_ = const_cast< ::SGFMsg::Ident*>(&::SGFMsg::Ident::default_instance());
}

MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBase::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBase::~MsgBase() {
  SharedDtor();
}

void MsgBase::SharedDtor() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBase_descriptor_;
}

const MsgBase& MsgBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

MsgBase* MsgBase::default_instance_ = NULL;

MsgBase* MsgBase::New() const {
  return new MsgBase;
}

void MsgBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::SGFMsg::Ident::Clear();
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  player_client_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SGFMsg.Ident player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_Client_list;
        break;
      }

      // repeated .SGFMsg.Ident player_Client_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_Client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_client_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_Client_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SGFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msg_data(), output);
  }

  // repeated .SGFMsg.Ident player_Client_list = 3;
  for (int i = 0; i < this->player_client_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_client_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SGFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }

  // required bytes msg_data = 2;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // repeated .SGFMsg.Ident player_Client_list = 3;
  for (int i = 0; i < this->player_client_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_client_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SGFMsg.Ident player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }

    // required bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

  }
  // repeated .SGFMsg.Ident player_Client_list = 3;
  total_size += 1 * this->player_client_list_size();
  for (int i = 0; i < this->player_client_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_client_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_client_list_.MergeFrom(from.player_client_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::SGFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  for (int i = 0; i < player_client_list_size(); i++) {
    if (!this->player_client_list(i).IsInitialized()) return false;
  }
  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(msg_data_, other->msg_data_);
    player_client_list_.Swap(&other->player_client_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBase_descriptor_;
  metadata.reflection = MsgBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgURLParam::kStrUrlFieldNumber;
const int MsgURLParam::kStrGetParamsFieldNumber;
const int MsgURLParam::kStrPostDataFieldNumber;
const int MsgURLParam::kNTimeOutMSFieldNumber;
const int MsgURLParam::kStrRspDataFieldNumber;
const int MsgURLParam::kNRetFieldNumber;
const int MsgURLParam::kNReqIDFieldNumber;
#endif  // !_MSC_VER

MsgURLParam::MsgURLParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgURLParam::InitAsDefaultInstance() {
}

MsgURLParam::MsgURLParam(const MsgURLParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgURLParam::SharedCtor() {
  _cached_size_ = 0;
  strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strgetparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpostdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ntimeoutms_ = 0;
  strrspdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nret_ = 0;
  nreqid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgURLParam::~MsgURLParam() {
  SharedDtor();
}

void MsgURLParam::SharedDtor() {
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
    delete strgetparams_;
  }
  if (strpostdata_ != &::google::protobuf::internal::kEmptyString) {
    delete strpostdata_;
  }
  if (strrspdata_ != &::google::protobuf::internal::kEmptyString) {
    delete strrspdata_;
  }
  if (this != default_instance_) {
  }
}

void MsgURLParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgURLParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgURLParam_descriptor_;
}

const MsgURLParam& MsgURLParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

MsgURLParam* MsgURLParam::default_instance_ = NULL;

MsgURLParam* MsgURLParam::New() const {
  return new MsgURLParam;
}

void MsgURLParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strurl()) {
      if (strurl_ != &::google::protobuf::internal::kEmptyString) {
        strurl_->clear();
      }
    }
    if (has_strgetparams()) {
      if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
        strgetparams_->clear();
      }
    }
    if (has_strpostdata()) {
      if (strpostdata_ != &::google::protobuf::internal::kEmptyString) {
        strpostdata_->clear();
      }
    }
    ntimeoutms_ = 0;
    if (has_strrspdata()) {
      if (strrspdata_ != &::google::protobuf::internal::kEmptyString) {
        strrspdata_->clear();
      }
    }
    nret_ = 0;
    nreqid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgURLParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strUrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strGetParams;
        break;
      }

      // optional bytes strGetParams = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strGetParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strgetparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPostData;
        break;
      }

      // optional bytes strPostData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPostData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strpostdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nTimeOutMS;
        break;
      }

      // optional int32 nTimeOutMS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nTimeOutMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimeoutms_)));
          set_has_ntimeoutms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strRspData;
        break;
      }

      // optional bytes strRspData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRspData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strrspdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nRet;
        break;
      }

      // optional int32 nRet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nret_)));
          set_has_nret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nReqID;
        break;
      }

      // optional int32 nReqID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreqid_)));
          set_has_nreqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgURLParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes strUrl = 1;
  if (has_strurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->strurl(), output);
  }

  // optional bytes strGetParams = 2;
  if (has_strgetparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strgetparams(), output);
  }

  // optional bytes strPostData = 3;
  if (has_strpostdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strpostdata(), output);
  }

  // optional int32 nTimeOutMS = 4;
  if (has_ntimeoutms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ntimeoutms(), output);
  }

  // optional bytes strRspData = 5;
  if (has_strrspdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strrspdata(), output);
  }

  // optional int32 nRet = 6;
  if (has_nret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nret(), output);
  }

  // optional int32 nReqID = 7;
  if (has_nreqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nreqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgURLParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes strUrl = 1;
  if (has_strurl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strurl(), target);
  }

  // optional bytes strGetParams = 2;
  if (has_strgetparams()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strgetparams(), target);
  }

  // optional bytes strPostData = 3;
  if (has_strpostdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strpostdata(), target);
  }

  // optional int32 nTimeOutMS = 4;
  if (has_ntimeoutms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ntimeoutms(), target);
  }

  // optional bytes strRspData = 5;
  if (has_strrspdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strrspdata(), target);
  }

  // optional int32 nRet = 6;
  if (has_nret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nret(), target);
  }

  // optional int32 nReqID = 7;
  if (has_nreqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nreqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgURLParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes strUrl = 1;
    if (has_strurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strurl());
    }

    // optional bytes strGetParams = 2;
    if (has_strgetparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strgetparams());
    }

    // optional bytes strPostData = 3;
    if (has_strpostdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strpostdata());
    }

    // optional int32 nTimeOutMS = 4;
    if (has_ntimeoutms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntimeoutms());
    }

    // optional bytes strRspData = 5;
    if (has_strrspdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strrspdata());
    }

    // optional int32 nRet = 6;
    if (has_nret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nret());
    }

    // optional int32 nReqID = 7;
    if (has_nreqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgURLParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgURLParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgURLParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgURLParam::MergeFrom(const MsgURLParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strurl()) {
      set_strurl(from.strurl());
    }
    if (from.has_strgetparams()) {
      set_strgetparams(from.strgetparams());
    }
    if (from.has_strpostdata()) {
      set_strpostdata(from.strpostdata());
    }
    if (from.has_ntimeoutms()) {
      set_ntimeoutms(from.ntimeoutms());
    }
    if (from.has_strrspdata()) {
      set_strrspdata(from.strrspdata());
    }
    if (from.has_nret()) {
      set_nret(from.nret());
    }
    if (from.has_nreqid()) {
      set_nreqid(from.nreqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgURLParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgURLParam::CopyFrom(const MsgURLParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgURLParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgURLParam::Swap(MsgURLParam* other) {
  if (other != this) {
    std::swap(strurl_, other->strurl_);
    std::swap(strgetparams_, other->strgetparams_);
    std::swap(strpostdata_, other->strpostdata_);
    std::swap(ntimeoutms_, other->ntimeoutms_);
    std::swap(strrspdata_, other->strrspdata_);
    std::swap(nret_, other->nret_);
    std::swap(nreqid_, other->nreqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgURLParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgURLParam_descriptor_;
  metadata.reflection = MsgURLParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeverStateReport::kServerIdFieldNumber;
const int SeverStateReport::kServerNameFieldNumber;
const int SeverStateReport::kServerIpFieldNumber;
const int SeverStateReport::kServerPortFieldNumber;
const int SeverStateReport::kServerMaxOnlineFieldNumber;
const int SeverStateReport::kServerCurCountFieldNumber;
const int SeverStateReport::kServerStateFieldNumber;
const int SeverStateReport::kServerTypeFieldNumber;
#endif  // !_MSC_VER

SeverStateReport::SeverStateReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeverStateReport::InitAsDefaultInstance() {
}

SeverStateReport::SeverStateReport(const SeverStateReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeverStateReport::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = 0;
  server_max_online_ = 0;
  server_cur_count_ = 0;
  server_state_ = 0;
  server_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeverStateReport::~SeverStateReport() {
  SharedDtor();
}

void SeverStateReport::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (this != default_instance_) {
  }
}

void SeverStateReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeverStateReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeverStateReport_descriptor_;
}

const SeverStateReport& SeverStateReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SGFMsgBase_2eproto();
  return *default_instance_;
}

SeverStateReport* SeverStateReport::default_instance_ = NULL;

SeverStateReport* SeverStateReport::New() const {
  return new SeverStateReport;
}

void SeverStateReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_server_ip()) {
      if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
        server_ip_->clear();
      }
    }
    server_port_ = 0;
    server_max_online_ = 0;
    server_cur_count_ = 0;
    server_state_ = 0;
    server_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeverStateReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // required bytes server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_ip;
        break;
      }

      // required bytes server_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_port;
        break;
      }

      // required int32 server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_port_)));
          set_has_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_server_max_online;
        break;
      }

      // optional int32 server_max_online = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_max_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_max_online_)));
          set_has_server_max_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_server_cur_count;
        break;
      }

      // optional int32 server_cur_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_cur_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_cur_count_)));
          set_has_server_cur_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_state;
        break;
      }

      // optional int32 server_state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_state_)));
          set_has_server_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_server_type;
        break;
      }

      // optional int32 server_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeverStateReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required bytes server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->server_name(), output);
  }

  // required bytes server_ip = 3;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->server_ip(), output);
  }

  // required int32 server_port = 4;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->server_port(), output);
  }

  // optional int32 server_max_online = 5;
  if (has_server_max_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->server_max_online(), output);
  }

  // optional int32 server_cur_count = 6;
  if (has_server_cur_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->server_cur_count(), output);
  }

  // optional int32 server_state = 7;
  if (has_server_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->server_state(), output);
  }

  // optional int32 server_type = 8;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->server_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeverStateReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required bytes server_name = 2;
  if (has_server_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_name(), target);
  }

  // required bytes server_ip = 3;
  if (has_server_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->server_ip(), target);
  }

  // required int32 server_port = 4;
  if (has_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->server_port(), target);
  }

  // optional int32 server_max_online = 5;
  if (has_server_max_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->server_max_online(), target);
  }

  // optional int32 server_cur_count = 6;
  if (has_server_cur_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->server_cur_count(), target);
  }

  // optional int32 server_state = 7;
  if (has_server_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->server_state(), target);
  }

  // optional int32 server_type = 8;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->server_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeverStateReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // required bytes server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_name());
    }

    // required bytes server_ip = 3;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_ip());
    }

    // required int32 server_port = 4;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_port());
    }

    // optional int32 server_max_online = 5;
    if (has_server_max_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_max_online());
    }

    // optional int32 server_cur_count = 6;
    if (has_server_cur_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_cur_count());
    }

    // optional int32 server_state = 7;
    if (has_server_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_state());
    }

    // optional int32 server_type = 8;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeverStateReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeverStateReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeverStateReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeverStateReport::MergeFrom(const SeverStateReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_server_ip()) {
      set_server_ip(from.server_ip());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_server_max_online()) {
      set_server_max_online(from.server_max_online());
    }
    if (from.has_server_cur_count()) {
      set_server_cur_count(from.server_cur_count());
    }
    if (from.has_server_state()) {
      set_server_state(from.server_state());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeverStateReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeverStateReport::CopyFrom(const SeverStateReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeverStateReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SeverStateReport::Swap(SeverStateReport* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(server_name_, other->server_name_);
    std::swap(server_ip_, other->server_ip_);
    std::swap(server_port_, other->server_port_);
    std::swap(server_max_online_, other->server_max_online_);
    std::swap(server_cur_count_, other->server_cur_count_);
    std::swap(server_state_, other->server_state_);
    std::swap(server_type_, other->server_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeverStateReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeverStateReport_descriptor_;
  metadata.reflection = SeverStateReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SGFMsg

// @@protoc_insertion_point(global_scope)
