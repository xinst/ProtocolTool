// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommGameMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommGameMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SGFMsg {

namespace {

const ::google::protobuf::Descriptor* AckEventResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEventResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountLoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountLoginRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommGameMsg_2eproto() {
  protobuf_AddDesc_CommGameMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommGameMsg.proto");
  GOOGLE_CHECK(file != NULL);
  AckEventResult_descriptor_ = file->message_type(0);
  static const int AckEventResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, evt_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, nparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, strparam1_),
  };
  AckEventResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEventResult_descriptor_,
      AckEventResult::default_instance_,
      AckEventResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEventResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEventResult));
  AccountLoginReq_descriptor_ = file->message_type(1);
  static const int AccountLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, security_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, loginmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, device_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, extra_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, access_token_),
  };
  AccountLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginReq_descriptor_,
      AccountLoginReq::default_instance_,
      AccountLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginReq));
  AccountLoginRes_descriptor_ = file->message_type(2);
  static const int AccountLoginRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, game_token_),
  };
  AccountLoginRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountLoginRes_descriptor_,
      AccountLoginRes::default_instance_,
      AccountLoginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountLoginRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountLoginRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommGameMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEventResult_descriptor_, &AckEventResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginReq_descriptor_, &AccountLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountLoginRes_descriptor_, &AccountLoginRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommGameMsg_2eproto() {
  delete AckEventResult::default_instance_;
  delete AckEventResult_reflection_;
  delete AccountLoginReq::default_instance_;
  delete AccountLoginReq_reflection_;
  delete AccountLoginRes::default_instance_;
  delete AccountLoginRes_reflection_;
}

void protobuf_AddDesc_CommGameMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SGFMsg::protobuf_AddDesc_SGFMsgBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CommGameMsg.proto\022\006SGFMsg\032\020SGFMsgBase."
    "proto\"F\n\016AckEventResult\022\020\n\010evt_code\030\001 \002("
    "\005\022\017\n\007nParam1\030\002 \001(\005\022\021\n\tstrParam1\030\003 \001(\t\"\221\001"
    "\n\017AccountLoginReq\022\025\n\rclientVersion\030\003 \001(\005"
    "\022\025\n\rsecurity_code\030\004 \001(\014\022\021\n\tloginMode\030\005 \001"
    "(\005\022\023\n\013device_info\030\010 \001(\014\022\022\n\nextra_info\030\t "
    "\001(\014\022\024\n\014access_token\030\n \001(\014\"N\n\017AccountLogi"
    "nRes\022\r\n\005state\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030"
    "\003 \001(\005\022\022\n\ngame_token\030\004 \001(\014", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommGameMsg.proto", &protobuf_RegisterTypes);
  AckEventResult::default_instance_ = new AckEventResult();
  AccountLoginReq::default_instance_ = new AccountLoginReq();
  AccountLoginRes::default_instance_ = new AccountLoginRes();
  AckEventResult::default_instance_->InitAsDefaultInstance();
  AccountLoginReq::default_instance_->InitAsDefaultInstance();
  AccountLoginRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommGameMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommGameMsg_2eproto {
  StaticDescriptorInitializer_CommGameMsg_2eproto() {
    protobuf_AddDesc_CommGameMsg_2eproto();
  }
} static_descriptor_initializer_CommGameMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckEventResult::kEvtCodeFieldNumber;
const int AckEventResult::kNParam1FieldNumber;
const int AckEventResult::kStrParam1FieldNumber;
#endif  // !_MSC_VER

AckEventResult::AckEventResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckEventResult::InitAsDefaultInstance() {
}

AckEventResult::AckEventResult(const AckEventResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckEventResult::SharedCtor() {
  _cached_size_ = 0;
  evt_code_ = 0;
  nparam1_ = 0;
  strparam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEventResult::~AckEventResult() {
  SharedDtor();
}

void AckEventResult::SharedDtor() {
  if (strparam1_ != &::google::protobuf::internal::kEmptyString) {
    delete strparam1_;
  }
  if (this != default_instance_) {
  }
}

void AckEventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEventResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEventResult_descriptor_;
}

const AckEventResult& AckEventResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommGameMsg_2eproto();
  return *default_instance_;
}

AckEventResult* AckEventResult::default_instance_ = NULL;

AckEventResult* AckEventResult::New() const {
  return new AckEventResult;
}

void AckEventResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evt_code_ = 0;
    nparam1_ = 0;
    if (has_strparam1()) {
      if (strparam1_ != &::google::protobuf::internal::kEmptyString) {
        strparam1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 evt_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evt_code_)));
          set_has_evt_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nParam1;
        break;
      }

      // optional int32 nParam1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nparam1_)));
          set_has_nparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strParam1;
        break;
      }

      // optional string strParam1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strParam1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strparam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparam1().data(), this->strparam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 evt_code = 1;
  if (has_evt_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->evt_code(), output);
  }

  // optional int32 nParam1 = 2;
  if (has_nparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nparam1(), output);
  }

  // optional string strParam1 = 3;
  if (has_strparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam1().data(), this->strparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strparam1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckEventResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 evt_code = 1;
  if (has_evt_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->evt_code(), target);
  }

  // optional int32 nParam1 = 2;
  if (has_nparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nparam1(), target);
  }

  // optional string strParam1 = 3;
  if (has_strparam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam1().data(), this->strparam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strparam1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckEventResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 evt_code = 1;
    if (has_evt_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->evt_code());
    }

    // optional int32 nParam1 = 2;
    if (has_nparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nparam1());
    }

    // optional string strParam1 = 3;
    if (has_strparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strparam1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEventResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEventResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEventResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEventResult::MergeFrom(const AckEventResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evt_code()) {
      set_evt_code(from.evt_code());
    }
    if (from.has_nparam1()) {
      set_nparam1(from.nparam1());
    }
    if (from.has_strparam1()) {
      set_strparam1(from.strparam1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEventResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEventResult::CopyFrom(const AckEventResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEventResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckEventResult::Swap(AckEventResult* other) {
  if (other != this) {
    std::swap(evt_code_, other->evt_code_);
    std::swap(nparam1_, other->nparam1_);
    std::swap(strparam1_, other->strparam1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEventResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEventResult_descriptor_;
  metadata.reflection = AckEventResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginReq::kClientVersionFieldNumber;
const int AccountLoginReq::kSecurityCodeFieldNumber;
const int AccountLoginReq::kLoginModeFieldNumber;
const int AccountLoginReq::kDeviceInfoFieldNumber;
const int AccountLoginReq::kExtraInfoFieldNumber;
const int AccountLoginReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

AccountLoginReq::AccountLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginReq::InitAsDefaultInstance() {
}

AccountLoginReq::AccountLoginReq(const AccountLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginReq::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0;
  security_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginmode_ = 0;
  device_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extra_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginReq::~AccountLoginReq() {
  SharedDtor();
}

void AccountLoginReq::SharedDtor() {
  if (security_code_ != &::google::protobuf::internal::kEmptyString) {
    delete security_code_;
  }
  if (device_info_ != &::google::protobuf::internal::kEmptyString) {
    delete device_info_;
  }
  if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_info_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginReq_descriptor_;
}

const AccountLoginReq& AccountLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommGameMsg_2eproto();
  return *default_instance_;
}

AccountLoginReq* AccountLoginReq::default_instance_ = NULL;

AccountLoginReq* AccountLoginReq::New() const {
  return new AccountLoginReq;
}

void AccountLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0;
    if (has_security_code()) {
      if (security_code_ != &::google::protobuf::internal::kEmptyString) {
        security_code_->clear();
      }
    }
    loginmode_ = 0;
    if (has_device_info()) {
      if (device_info_ != &::google::protobuf::internal::kEmptyString) {
        device_info_->clear();
      }
    }
    if (has_extra_info()) {
      if (extra_info_ != &::google::protobuf::internal::kEmptyString) {
        extra_info_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clientVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_code;
        break;
      }

      // optional bytes security_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_security_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loginMode;
        break;
      }

      // optional int32 loginMode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginmode_)));
          set_has_loginmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_info;
        break;
      }

      // optional bytes device_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_extra_info;
        break;
      }

      // optional bytes extra_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_access_token;
        break;
      }

      // optional bytes access_token = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clientVersion = 3;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clientversion(), output);
  }

  // optional bytes security_code = 4;
  if (has_security_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->security_code(), output);
  }

  // optional int32 loginMode = 5;
  if (has_loginmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loginmode(), output);
  }

  // optional bytes device_info = 8;
  if (has_device_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->device_info(), output);
  }

  // optional bytes extra_info = 9;
  if (has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->extra_info(), output);
  }

  // optional bytes access_token = 10;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clientVersion = 3;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clientversion(), target);
  }

  // optional bytes security_code = 4;
  if (has_security_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->security_code(), target);
  }

  // optional int32 loginMode = 5;
  if (has_loginmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->loginmode(), target);
  }

  // optional bytes device_info = 8;
  if (has_device_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->device_info(), target);
  }

  // optional bytes extra_info = 9;
  if (has_extra_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->extra_info(), target);
  }

  // optional bytes access_token = 10;
  if (has_access_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clientVersion = 3;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // optional bytes security_code = 4;
    if (has_security_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->security_code());
    }

    // optional int32 loginMode = 5;
    if (has_loginmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginmode());
    }

    // optional bytes device_info = 8;
    if (has_device_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_info());
    }

    // optional bytes extra_info = 9;
    if (has_extra_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extra_info());
    }

    // optional bytes access_token = 10;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginReq::MergeFrom(const AccountLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_security_code()) {
      set_security_code(from.security_code());
    }
    if (from.has_loginmode()) {
      set_loginmode(from.loginmode());
    }
    if (from.has_device_info()) {
      set_device_info(from.device_info());
    }
    if (from.has_extra_info()) {
      set_extra_info(from.extra_info());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginReq::CopyFrom(const AccountLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginReq::IsInitialized() const {

  return true;
}

void AccountLoginReq::Swap(AccountLoginReq* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(security_code_, other->security_code_);
    std::swap(loginmode_, other->loginmode_);
    std::swap(device_info_, other->device_info_);
    std::swap(extra_info_, other->extra_info_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginReq_descriptor_;
  metadata.reflection = AccountLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountLoginRes::kStateFieldNumber;
const int AccountLoginRes::kIpFieldNumber;
const int AccountLoginRes::kPortFieldNumber;
const int AccountLoginRes::kGameTokenFieldNumber;
#endif  // !_MSC_VER

AccountLoginRes::AccountLoginRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountLoginRes::InitAsDefaultInstance() {
}

AccountLoginRes::AccountLoginRes(const AccountLoginRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountLoginRes::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  game_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountLoginRes::~AccountLoginRes() {
  SharedDtor();
}

void AccountLoginRes::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (game_token_ != &::google::protobuf::internal::kEmptyString) {
    delete game_token_;
  }
  if (this != default_instance_) {
  }
}

void AccountLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountLoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountLoginRes_descriptor_;
}

const AccountLoginRes& AccountLoginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommGameMsg_2eproto();
  return *default_instance_;
}

AccountLoginRes* AccountLoginRes::default_instance_ = NULL;

AccountLoginRes* AccountLoginRes::New() const {
  return new AccountLoginRes;
}

void AccountLoginRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_game_token()) {
      if (game_token_ != &::google::protobuf::internal::kEmptyString) {
        game_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_game_token;
        break;
      }

      // optional bytes game_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional bytes game_token = 4;
  if (has_game_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->game_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountLoginRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional bytes game_token = 4;
  if (has_game_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->game_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountLoginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bytes game_token = 4;
    if (has_game_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountLoginRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountLoginRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountLoginRes::MergeFrom(const AccountLoginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_game_token()) {
      set_game_token(from.game_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountLoginRes::CopyFrom(const AccountLoginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountLoginRes::Swap(AccountLoginRes* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(game_token_, other->game_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountLoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountLoginRes_descriptor_;
  metadata.reflection = AccountLoginRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SGFMsg

// @@protoc_insertion_point(global_scope)
