// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SGFMsgBase.proto

#ifndef PROTOBUF_SGFMsgBase_2eproto__INCLUDED
#define PROTOBUF_SGFMsgBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SGFMsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SGFMsgBase_2eproto();
void protobuf_AssignDesc_SGFMsgBase_2eproto();
void protobuf_ShutdownFile_SGFMsgBase_2eproto();

class Ident;
class PropertyInt;
class PropertyString;
class PropertyObject;
class MsgBase;
class MsgURLParam;
class SeverStateReport;

// ===================================================================

class Ident : public ::google::protobuf::Message {
 public:
  Ident();
  virtual ~Ident();

  Ident(const Ident& from);

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ident& default_instance();

  void Swap(Ident* other);

  // implements Message ----------------------------------------------

  Ident* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ident& from);
  void MergeFrom(const Ident& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 svrid = 1;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvridFieldNumber = 1;
  inline ::google::protobuf::int64 svrid() const;
  inline void set_svrid(::google::protobuf::int64 value);

  // required int64 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SGFMsg.Ident)
 private:
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 svrid_;
  ::google::protobuf::int64 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static Ident* default_instance_;
};
// -------------------------------------------------------------------

class PropertyInt : public ::google::protobuf::Message {
 public:
  PropertyInt();
  virtual ~PropertyInt();

  PropertyInt(const PropertyInt& from);

  inline PropertyInt& operator=(const PropertyInt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyInt& default_instance();

  void Swap(PropertyInt* other);

  // implements Message ----------------------------------------------

  PropertyInt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyInt& from);
  void MergeFrom(const PropertyInt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes property_name = 1;
  inline bool has_property_name() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  inline const ::std::string& property_name() const;
  inline void set_property_name(const ::std::string& value);
  inline void set_property_name(const char* value);
  inline void set_property_name(const void* value, size_t size);
  inline ::std::string* mutable_property_name();
  inline ::std::string* release_property_name();
  inline void set_allocated_property_name(::std::string* property_name);

  // required int64 data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline ::google::protobuf::int64 data() const;
  inline void set_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SGFMsg.PropertyInt)
 private:
  inline void set_has_property_name();
  inline void clear_has_property_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_name_;
  ::google::protobuf::int64 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static PropertyInt* default_instance_;
};
// -------------------------------------------------------------------

class PropertyString : public ::google::protobuf::Message {
 public:
  PropertyString();
  virtual ~PropertyString();

  PropertyString(const PropertyString& from);

  inline PropertyString& operator=(const PropertyString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyString& default_instance();

  void Swap(PropertyString* other);

  // implements Message ----------------------------------------------

  PropertyString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyString& from);
  void MergeFrom(const PropertyString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes property_name = 1;
  inline bool has_property_name() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  inline const ::std::string& property_name() const;
  inline void set_property_name(const ::std::string& value);
  inline void set_property_name(const char* value);
  inline void set_property_name(const void* value, size_t size);
  inline ::std::string* mutable_property_name();
  inline ::std::string* release_property_name();
  inline void set_allocated_property_name(::std::string* property_name);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:SGFMsg.PropertyString)
 private:
  inline void set_has_property_name();
  inline void clear_has_property_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_name_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static PropertyString* default_instance_;
};
// -------------------------------------------------------------------

class PropertyObject : public ::google::protobuf::Message {
 public:
  PropertyObject();
  virtual ~PropertyObject();

  PropertyObject(const PropertyObject& from);

  inline PropertyObject& operator=(const PropertyObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropertyObject& default_instance();

  void Swap(PropertyObject* other);

  // implements Message ----------------------------------------------

  PropertyObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropertyObject& from);
  void MergeFrom(const PropertyObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes property_name = 1;
  inline bool has_property_name() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 1;
  inline const ::std::string& property_name() const;
  inline void set_property_name(const ::std::string& value);
  inline void set_property_name(const char* value);
  inline void set_property_name(const void* value, size_t size);
  inline ::std::string* mutable_property_name();
  inline ::std::string* release_property_name();
  inline void set_allocated_property_name(::std::string* property_name);

  // required .SGFMsg.Ident data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SGFMsg::Ident& data() const;
  inline ::SGFMsg::Ident* mutable_data();
  inline ::SGFMsg::Ident* release_data();
  inline void set_allocated_data(::SGFMsg::Ident* data);

  // @@protoc_insertion_point(class_scope:SGFMsg.PropertyObject)
 private:
  inline void set_has_property_name();
  inline void clear_has_property_name();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_name_;
  ::SGFMsg::Ident* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static PropertyObject* default_instance_;
};
// -------------------------------------------------------------------

class MsgBase : public ::google::protobuf::Message {
 public:
  MsgBase();
  virtual ~MsgBase();

  MsgBase(const MsgBase& from);

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBase& default_instance();

  void Swap(MsgBase* other);

  // implements Message ----------------------------------------------

  MsgBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SGFMsg.Ident player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline const ::SGFMsg::Ident& player_id() const;
  inline ::SGFMsg::Ident* mutable_player_id();
  inline ::SGFMsg::Ident* release_player_id();
  inline void set_allocated_player_id(::SGFMsg::Ident* player_id);

  // required bytes msg_data = 2;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 2;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  inline void set_allocated_msg_data(::std::string* msg_data);

  // repeated .SGFMsg.Ident player_Client_list = 3;
  inline int player_client_list_size() const;
  inline void clear_player_client_list();
  static const int kPlayerClientListFieldNumber = 3;
  inline const ::SGFMsg::Ident& player_client_list(int index) const;
  inline ::SGFMsg::Ident* mutable_player_client_list(int index);
  inline ::SGFMsg::Ident* add_player_client_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SGFMsg::Ident >&
      player_client_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SGFMsg::Ident >*
      mutable_player_client_list();

  // @@protoc_insertion_point(class_scope:SGFMsg.MsgBase)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SGFMsg::Ident* player_id_;
  ::std::string* msg_data_;
  ::google::protobuf::RepeatedPtrField< ::SGFMsg::Ident > player_client_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static MsgBase* default_instance_;
};
// -------------------------------------------------------------------

class MsgURLParam : public ::google::protobuf::Message {
 public:
  MsgURLParam();
  virtual ~MsgURLParam();

  MsgURLParam(const MsgURLParam& from);

  inline MsgURLParam& operator=(const MsgURLParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgURLParam& default_instance();

  void Swap(MsgURLParam* other);

  // implements Message ----------------------------------------------

  MsgURLParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgURLParam& from);
  void MergeFrom(const MsgURLParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes strUrl = 1;
  inline bool has_strurl() const;
  inline void clear_strurl();
  static const int kStrUrlFieldNumber = 1;
  inline const ::std::string& strurl() const;
  inline void set_strurl(const ::std::string& value);
  inline void set_strurl(const char* value);
  inline void set_strurl(const void* value, size_t size);
  inline ::std::string* mutable_strurl();
  inline ::std::string* release_strurl();
  inline void set_allocated_strurl(::std::string* strurl);

  // optional bytes strGetParams = 2;
  inline bool has_strgetparams() const;
  inline void clear_strgetparams();
  static const int kStrGetParamsFieldNumber = 2;
  inline const ::std::string& strgetparams() const;
  inline void set_strgetparams(const ::std::string& value);
  inline void set_strgetparams(const char* value);
  inline void set_strgetparams(const void* value, size_t size);
  inline ::std::string* mutable_strgetparams();
  inline ::std::string* release_strgetparams();
  inline void set_allocated_strgetparams(::std::string* strgetparams);

  // optional bytes strPostData = 3;
  inline bool has_strpostdata() const;
  inline void clear_strpostdata();
  static const int kStrPostDataFieldNumber = 3;
  inline const ::std::string& strpostdata() const;
  inline void set_strpostdata(const ::std::string& value);
  inline void set_strpostdata(const char* value);
  inline void set_strpostdata(const void* value, size_t size);
  inline ::std::string* mutable_strpostdata();
  inline ::std::string* release_strpostdata();
  inline void set_allocated_strpostdata(::std::string* strpostdata);

  // optional int32 nTimeOutMS = 4;
  inline bool has_ntimeoutms() const;
  inline void clear_ntimeoutms();
  static const int kNTimeOutMSFieldNumber = 4;
  inline ::google::protobuf::int32 ntimeoutms() const;
  inline void set_ntimeoutms(::google::protobuf::int32 value);

  // optional bytes strRspData = 5;
  inline bool has_strrspdata() const;
  inline void clear_strrspdata();
  static const int kStrRspDataFieldNumber = 5;
  inline const ::std::string& strrspdata() const;
  inline void set_strrspdata(const ::std::string& value);
  inline void set_strrspdata(const char* value);
  inline void set_strrspdata(const void* value, size_t size);
  inline ::std::string* mutable_strrspdata();
  inline ::std::string* release_strrspdata();
  inline void set_allocated_strrspdata(::std::string* strrspdata);

  // optional int32 nRet = 6;
  inline bool has_nret() const;
  inline void clear_nret();
  static const int kNRetFieldNumber = 6;
  inline ::google::protobuf::int32 nret() const;
  inline void set_nret(::google::protobuf::int32 value);

  // optional int32 nReqID = 7;
  inline bool has_nreqid() const;
  inline void clear_nreqid();
  static const int kNReqIDFieldNumber = 7;
  inline ::google::protobuf::int32 nreqid() const;
  inline void set_nreqid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SGFMsg.MsgURLParam)
 private:
  inline void set_has_strurl();
  inline void clear_has_strurl();
  inline void set_has_strgetparams();
  inline void clear_has_strgetparams();
  inline void set_has_strpostdata();
  inline void clear_has_strpostdata();
  inline void set_has_ntimeoutms();
  inline void clear_has_ntimeoutms();
  inline void set_has_strrspdata();
  inline void clear_has_strrspdata();
  inline void set_has_nret();
  inline void clear_has_nret();
  inline void set_has_nreqid();
  inline void clear_has_nreqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strurl_;
  ::std::string* strgetparams_;
  ::std::string* strpostdata_;
  ::std::string* strrspdata_;
  ::google::protobuf::int32 ntimeoutms_;
  ::google::protobuf::int32 nret_;
  ::google::protobuf::int32 nreqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static MsgURLParam* default_instance_;
};
// -------------------------------------------------------------------

class SeverStateReport : public ::google::protobuf::Message {
 public:
  SeverStateReport();
  virtual ~SeverStateReport();

  SeverStateReport(const SeverStateReport& from);

  inline SeverStateReport& operator=(const SeverStateReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeverStateReport& default_instance();

  void Swap(SeverStateReport* other);

  // implements Message ----------------------------------------------

  SeverStateReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeverStateReport& from);
  void MergeFrom(const SeverStateReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 server_id() const;
  inline void set_server_id(::google::protobuf::int32 value);

  // required bytes server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const void* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  inline void set_allocated_server_name(::std::string* server_name);

  // required bytes server_ip = 3;
  inline bool has_server_ip() const;
  inline void clear_server_ip();
  static const int kServerIpFieldNumber = 3;
  inline const ::std::string& server_ip() const;
  inline void set_server_ip(const ::std::string& value);
  inline void set_server_ip(const char* value);
  inline void set_server_ip(const void* value, size_t size);
  inline ::std::string* mutable_server_ip();
  inline ::std::string* release_server_ip();
  inline void set_allocated_server_ip(::std::string* server_ip);

  // required int32 server_port = 4;
  inline bool has_server_port() const;
  inline void clear_server_port();
  static const int kServerPortFieldNumber = 4;
  inline ::google::protobuf::int32 server_port() const;
  inline void set_server_port(::google::protobuf::int32 value);

  // optional int32 server_max_online = 5;
  inline bool has_server_max_online() const;
  inline void clear_server_max_online();
  static const int kServerMaxOnlineFieldNumber = 5;
  inline ::google::protobuf::int32 server_max_online() const;
  inline void set_server_max_online(::google::protobuf::int32 value);

  // optional int32 server_cur_count = 6;
  inline bool has_server_cur_count() const;
  inline void clear_server_cur_count();
  static const int kServerCurCountFieldNumber = 6;
  inline ::google::protobuf::int32 server_cur_count() const;
  inline void set_server_cur_count(::google::protobuf::int32 value);

  // optional int32 server_state = 7;
  inline bool has_server_state() const;
  inline void clear_server_state();
  static const int kServerStateFieldNumber = 7;
  inline ::google::protobuf::int32 server_state() const;
  inline void set_server_state(::google::protobuf::int32 value);

  // optional int32 server_type = 8;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 8;
  inline ::google::protobuf::int32 server_type() const;
  inline void set_server_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SGFMsg.SeverStateReport)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_server_port();
  inline void clear_has_server_port();
  inline void set_has_server_max_online();
  inline void clear_has_server_max_online();
  inline void set_has_server_cur_count();
  inline void clear_has_server_cur_count();
  inline void set_has_server_state();
  inline void clear_has_server_state();
  inline void set_has_server_type();
  inline void clear_has_server_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* server_name_;
  ::google::protobuf::int32 server_id_;
  ::google::protobuf::int32 server_port_;
  ::std::string* server_ip_;
  ::google::protobuf::int32 server_max_online_;
  ::google::protobuf::int32 server_cur_count_;
  ::google::protobuf::int32 server_state_;
  ::google::protobuf::int32 server_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SGFMsgBase_2eproto();
  friend void protobuf_AssignDesc_SGFMsgBase_2eproto();
  friend void protobuf_ShutdownFile_SGFMsgBase_2eproto();

  void InitAsDefaultInstance();
  static SeverStateReport* default_instance_;
};
// ===================================================================


// ===================================================================

// Ident

// required int64 svrid = 1;
inline bool Ident::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ident::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ident::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ident::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
inline ::google::protobuf::int64 Ident::svrid() const {
  return svrid_;
}
inline void Ident::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
}

// required int64 index = 2;
inline bool Ident::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ident::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ident::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ident::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 Ident::index() const {
  return index_;
}
inline void Ident::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// PropertyInt

// required bytes property_name = 1;
inline bool PropertyInt::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyInt::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyInt::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyInt::clear_property_name() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    property_name_->clear();
  }
  clear_has_property_name();
}
inline const ::std::string& PropertyInt::property_name() const {
  return *property_name_;
}
inline void PropertyInt::set_property_name(const ::std::string& value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyInt::set_property_name(const char* value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyInt::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyInt::mutable_property_name() {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  return property_name_;
}
inline ::std::string* PropertyInt::release_property_name() {
  clear_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_name_;
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropertyInt::set_allocated_property_name(::std::string* property_name) {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (property_name) {
    set_has_property_name();
    property_name_ = property_name;
  } else {
    clear_has_property_name();
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 data = 2;
inline bool PropertyInt::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyInt::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyInt::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyInt::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
  clear_has_data();
}
inline ::google::protobuf::int64 PropertyInt::data() const {
  return data_;
}
inline void PropertyInt::set_data(::google::protobuf::int64 value) {
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// PropertyString

// required bytes property_name = 1;
inline bool PropertyString::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyString::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyString::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyString::clear_property_name() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    property_name_->clear();
  }
  clear_has_property_name();
}
inline const ::std::string& PropertyString::property_name() const {
  return *property_name_;
}
inline void PropertyString::set_property_name(const ::std::string& value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyString::set_property_name(const char* value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyString::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyString::mutable_property_name() {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  return property_name_;
}
inline ::std::string* PropertyString::release_property_name() {
  clear_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_name_;
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropertyString::set_allocated_property_name(::std::string* property_name) {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (property_name) {
    set_has_property_name();
    property_name_ = property_name;
  } else {
    clear_has_property_name();
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes data = 2;
inline bool PropertyString::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyString::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyString::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyString::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PropertyString::data() const {
  return *data_;
}
inline void PropertyString::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PropertyString::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PropertyString::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyString::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PropertyString::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropertyString::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PropertyObject

// required bytes property_name = 1;
inline bool PropertyObject::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropertyObject::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropertyObject::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropertyObject::clear_property_name() {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    property_name_->clear();
  }
  clear_has_property_name();
}
inline const ::std::string& PropertyObject::property_name() const {
  return *property_name_;
}
inline void PropertyObject::set_property_name(const ::std::string& value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyObject::set_property_name(const char* value) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(value);
}
inline void PropertyObject::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  property_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PropertyObject::mutable_property_name() {
  set_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    property_name_ = new ::std::string;
  }
  return property_name_;
}
inline ::std::string* PropertyObject::release_property_name() {
  clear_has_property_name();
  if (property_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_name_;
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PropertyObject::set_allocated_property_name(::std::string* property_name) {
  if (property_name_ != &::google::protobuf::internal::kEmptyString) {
    delete property_name_;
  }
  if (property_name) {
    set_has_property_name();
    property_name_ = property_name;
  } else {
    clear_has_property_name();
    property_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .SGFMsg.Ident data = 2;
inline bool PropertyObject::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropertyObject::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropertyObject::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropertyObject::clear_data() {
  if (data_ != NULL) data_->::SGFMsg::Ident::Clear();
  clear_has_data();
}
inline const ::SGFMsg::Ident& PropertyObject::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SGFMsg::Ident* PropertyObject::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SGFMsg::Ident;
  return data_;
}
inline ::SGFMsg::Ident* PropertyObject::release_data() {
  clear_has_data();
  ::SGFMsg::Ident* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PropertyObject::set_allocated_data(::SGFMsg::Ident* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// MsgBase

// required .SGFMsg.Ident player_id = 1;
inline bool MsgBase::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBase::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBase::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBase::clear_player_id() {
  if (player_id_ != NULL) player_id_->::SGFMsg::Ident::Clear();
  clear_has_player_id();
}
inline const ::SGFMsg::Ident& MsgBase::player_id() const {
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
inline ::SGFMsg::Ident* MsgBase::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) player_id_ = new ::SGFMsg::Ident;
  return player_id_;
}
inline ::SGFMsg::Ident* MsgBase::release_player_id() {
  clear_has_player_id();
  ::SGFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline void MsgBase::set_allocated_player_id(::SGFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
}

// required bytes msg_data = 2;
inline bool MsgBase::has_msg_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgBase::set_has_msg_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgBase::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgBase::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& MsgBase::msg_data() const {
  return *msg_data_;
}
inline void MsgBase::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void MsgBase::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void MsgBase::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBase::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* MsgBase::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgBase::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (msg_data) {
    set_has_msg_data();
    msg_data_ = msg_data;
  } else {
    clear_has_msg_data();
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SGFMsg.Ident player_Client_list = 3;
inline int MsgBase::player_client_list_size() const {
  return player_client_list_.size();
}
inline void MsgBase::clear_player_client_list() {
  player_client_list_.Clear();
}
inline const ::SGFMsg::Ident& MsgBase::player_client_list(int index) const {
  return player_client_list_.Get(index);
}
inline ::SGFMsg::Ident* MsgBase::mutable_player_client_list(int index) {
  return player_client_list_.Mutable(index);
}
inline ::SGFMsg::Ident* MsgBase::add_player_client_list() {
  return player_client_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SGFMsg::Ident >&
MsgBase::player_client_list() const {
  return player_client_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SGFMsg::Ident >*
MsgBase::mutable_player_client_list() {
  return &player_client_list_;
}

// -------------------------------------------------------------------

// MsgURLParam

// required bytes strUrl = 1;
inline bool MsgURLParam::has_strurl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgURLParam::set_has_strurl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgURLParam::clear_has_strurl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgURLParam::clear_strurl() {
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    strurl_->clear();
  }
  clear_has_strurl();
}
inline const ::std::string& MsgURLParam::strurl() const {
  return *strurl_;
}
inline void MsgURLParam::set_strurl(const ::std::string& value) {
  set_has_strurl();
  if (strurl_ == &::google::protobuf::internal::kEmptyString) {
    strurl_ = new ::std::string;
  }
  strurl_->assign(value);
}
inline void MsgURLParam::set_strurl(const char* value) {
  set_has_strurl();
  if (strurl_ == &::google::protobuf::internal::kEmptyString) {
    strurl_ = new ::std::string;
  }
  strurl_->assign(value);
}
inline void MsgURLParam::set_strurl(const void* value, size_t size) {
  set_has_strurl();
  if (strurl_ == &::google::protobuf::internal::kEmptyString) {
    strurl_ = new ::std::string;
  }
  strurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgURLParam::mutable_strurl() {
  set_has_strurl();
  if (strurl_ == &::google::protobuf::internal::kEmptyString) {
    strurl_ = new ::std::string;
  }
  return strurl_;
}
inline ::std::string* MsgURLParam::release_strurl() {
  clear_has_strurl();
  if (strurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strurl_;
    strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgURLParam::set_allocated_strurl(::std::string* strurl) {
  if (strurl_ != &::google::protobuf::internal::kEmptyString) {
    delete strurl_;
  }
  if (strurl) {
    set_has_strurl();
    strurl_ = strurl;
  } else {
    clear_has_strurl();
    strurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strGetParams = 2;
inline bool MsgURLParam::has_strgetparams() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgURLParam::set_has_strgetparams() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgURLParam::clear_has_strgetparams() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgURLParam::clear_strgetparams() {
  if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
    strgetparams_->clear();
  }
  clear_has_strgetparams();
}
inline const ::std::string& MsgURLParam::strgetparams() const {
  return *strgetparams_;
}
inline void MsgURLParam::set_strgetparams(const ::std::string& value) {
  set_has_strgetparams();
  if (strgetparams_ == &::google::protobuf::internal::kEmptyString) {
    strgetparams_ = new ::std::string;
  }
  strgetparams_->assign(value);
}
inline void MsgURLParam::set_strgetparams(const char* value) {
  set_has_strgetparams();
  if (strgetparams_ == &::google::protobuf::internal::kEmptyString) {
    strgetparams_ = new ::std::string;
  }
  strgetparams_->assign(value);
}
inline void MsgURLParam::set_strgetparams(const void* value, size_t size) {
  set_has_strgetparams();
  if (strgetparams_ == &::google::protobuf::internal::kEmptyString) {
    strgetparams_ = new ::std::string;
  }
  strgetparams_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgURLParam::mutable_strgetparams() {
  set_has_strgetparams();
  if (strgetparams_ == &::google::protobuf::internal::kEmptyString) {
    strgetparams_ = new ::std::string;
  }
  return strgetparams_;
}
inline ::std::string* MsgURLParam::release_strgetparams() {
  clear_has_strgetparams();
  if (strgetparams_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strgetparams_;
    strgetparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgURLParam::set_allocated_strgetparams(::std::string* strgetparams) {
  if (strgetparams_ != &::google::protobuf::internal::kEmptyString) {
    delete strgetparams_;
  }
  if (strgetparams) {
    set_has_strgetparams();
    strgetparams_ = strgetparams;
  } else {
    clear_has_strgetparams();
    strgetparams_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strPostData = 3;
inline bool MsgURLParam::has_strpostdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgURLParam::set_has_strpostdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgURLParam::clear_has_strpostdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgURLParam::clear_strpostdata() {
  if (strpostdata_ != &::google::protobuf::internal::kEmptyString) {
    strpostdata_->clear();
  }
  clear_has_strpostdata();
}
inline const ::std::string& MsgURLParam::strpostdata() const {
  return *strpostdata_;
}
inline void MsgURLParam::set_strpostdata(const ::std::string& value) {
  set_has_strpostdata();
  if (strpostdata_ == &::google::protobuf::internal::kEmptyString) {
    strpostdata_ = new ::std::string;
  }
  strpostdata_->assign(value);
}
inline void MsgURLParam::set_strpostdata(const char* value) {
  set_has_strpostdata();
  if (strpostdata_ == &::google::protobuf::internal::kEmptyString) {
    strpostdata_ = new ::std::string;
  }
  strpostdata_->assign(value);
}
inline void MsgURLParam::set_strpostdata(const void* value, size_t size) {
  set_has_strpostdata();
  if (strpostdata_ == &::google::protobuf::internal::kEmptyString) {
    strpostdata_ = new ::std::string;
  }
  strpostdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgURLParam::mutable_strpostdata() {
  set_has_strpostdata();
  if (strpostdata_ == &::google::protobuf::internal::kEmptyString) {
    strpostdata_ = new ::std::string;
  }
  return strpostdata_;
}
inline ::std::string* MsgURLParam::release_strpostdata() {
  clear_has_strpostdata();
  if (strpostdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpostdata_;
    strpostdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgURLParam::set_allocated_strpostdata(::std::string* strpostdata) {
  if (strpostdata_ != &::google::protobuf::internal::kEmptyString) {
    delete strpostdata_;
  }
  if (strpostdata) {
    set_has_strpostdata();
    strpostdata_ = strpostdata;
  } else {
    clear_has_strpostdata();
    strpostdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nTimeOutMS = 4;
inline bool MsgURLParam::has_ntimeoutms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgURLParam::set_has_ntimeoutms() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgURLParam::clear_has_ntimeoutms() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgURLParam::clear_ntimeoutms() {
  ntimeoutms_ = 0;
  clear_has_ntimeoutms();
}
inline ::google::protobuf::int32 MsgURLParam::ntimeoutms() const {
  return ntimeoutms_;
}
inline void MsgURLParam::set_ntimeoutms(::google::protobuf::int32 value) {
  set_has_ntimeoutms();
  ntimeoutms_ = value;
}

// optional bytes strRspData = 5;
inline bool MsgURLParam::has_strrspdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgURLParam::set_has_strrspdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgURLParam::clear_has_strrspdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgURLParam::clear_strrspdata() {
  if (strrspdata_ != &::google::protobuf::internal::kEmptyString) {
    strrspdata_->clear();
  }
  clear_has_strrspdata();
}
inline const ::std::string& MsgURLParam::strrspdata() const {
  return *strrspdata_;
}
inline void MsgURLParam::set_strrspdata(const ::std::string& value) {
  set_has_strrspdata();
  if (strrspdata_ == &::google::protobuf::internal::kEmptyString) {
    strrspdata_ = new ::std::string;
  }
  strrspdata_->assign(value);
}
inline void MsgURLParam::set_strrspdata(const char* value) {
  set_has_strrspdata();
  if (strrspdata_ == &::google::protobuf::internal::kEmptyString) {
    strrspdata_ = new ::std::string;
  }
  strrspdata_->assign(value);
}
inline void MsgURLParam::set_strrspdata(const void* value, size_t size) {
  set_has_strrspdata();
  if (strrspdata_ == &::google::protobuf::internal::kEmptyString) {
    strrspdata_ = new ::std::string;
  }
  strrspdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgURLParam::mutable_strrspdata() {
  set_has_strrspdata();
  if (strrspdata_ == &::google::protobuf::internal::kEmptyString) {
    strrspdata_ = new ::std::string;
  }
  return strrspdata_;
}
inline ::std::string* MsgURLParam::release_strrspdata() {
  clear_has_strrspdata();
  if (strrspdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strrspdata_;
    strrspdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgURLParam::set_allocated_strrspdata(::std::string* strrspdata) {
  if (strrspdata_ != &::google::protobuf::internal::kEmptyString) {
    delete strrspdata_;
  }
  if (strrspdata) {
    set_has_strrspdata();
    strrspdata_ = strrspdata;
  } else {
    clear_has_strrspdata();
    strrspdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nRet = 6;
inline bool MsgURLParam::has_nret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgURLParam::set_has_nret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgURLParam::clear_has_nret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgURLParam::clear_nret() {
  nret_ = 0;
  clear_has_nret();
}
inline ::google::protobuf::int32 MsgURLParam::nret() const {
  return nret_;
}
inline void MsgURLParam::set_nret(::google::protobuf::int32 value) {
  set_has_nret();
  nret_ = value;
}

// optional int32 nReqID = 7;
inline bool MsgURLParam::has_nreqid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgURLParam::set_has_nreqid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgURLParam::clear_has_nreqid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgURLParam::clear_nreqid() {
  nreqid_ = 0;
  clear_has_nreqid();
}
inline ::google::protobuf::int32 MsgURLParam::nreqid() const {
  return nreqid_;
}
inline void MsgURLParam::set_nreqid(::google::protobuf::int32 value) {
  set_has_nreqid();
  nreqid_ = value;
}

// -------------------------------------------------------------------

// SeverStateReport

// required int32 server_id = 1;
inline bool SeverStateReport::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeverStateReport::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeverStateReport::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeverStateReport::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 SeverStateReport::server_id() const {
  return server_id_;
}
inline void SeverStateReport::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
}

// required bytes server_name = 2;
inline bool SeverStateReport::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeverStateReport::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeverStateReport::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeverStateReport::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& SeverStateReport::server_name() const {
  return *server_name_;
}
inline void SeverStateReport::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void SeverStateReport::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void SeverStateReport::set_server_name(const void* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeverStateReport::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* SeverStateReport::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeverStateReport::set_allocated_server_name(::std::string* server_name) {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (server_name) {
    set_has_server_name();
    server_name_ = server_name;
  } else {
    clear_has_server_name();
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes server_ip = 3;
inline bool SeverStateReport::has_server_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeverStateReport::set_has_server_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeverStateReport::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeverStateReport::clear_server_ip() {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    server_ip_->clear();
  }
  clear_has_server_ip();
}
inline const ::std::string& SeverStateReport::server_ip() const {
  return *server_ip_;
}
inline void SeverStateReport::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SeverStateReport::set_server_ip(const char* value) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(value);
}
inline void SeverStateReport::set_server_ip(const void* value, size_t size) {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeverStateReport::mutable_server_ip() {
  set_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    server_ip_ = new ::std::string;
  }
  return server_ip_;
}
inline ::std::string* SeverStateReport::release_server_ip() {
  clear_has_server_ip();
  if (server_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_ip_;
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeverStateReport::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete server_ip_;
  }
  if (server_ip) {
    set_has_server_ip();
    server_ip_ = server_ip;
  } else {
    clear_has_server_ip();
    server_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 server_port = 4;
inline bool SeverStateReport::has_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeverStateReport::set_has_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeverStateReport::clear_has_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeverStateReport::clear_server_port() {
  server_port_ = 0;
  clear_has_server_port();
}
inline ::google::protobuf::int32 SeverStateReport::server_port() const {
  return server_port_;
}
inline void SeverStateReport::set_server_port(::google::protobuf::int32 value) {
  set_has_server_port();
  server_port_ = value;
}

// optional int32 server_max_online = 5;
inline bool SeverStateReport::has_server_max_online() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SeverStateReport::set_has_server_max_online() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SeverStateReport::clear_has_server_max_online() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SeverStateReport::clear_server_max_online() {
  server_max_online_ = 0;
  clear_has_server_max_online();
}
inline ::google::protobuf::int32 SeverStateReport::server_max_online() const {
  return server_max_online_;
}
inline void SeverStateReport::set_server_max_online(::google::protobuf::int32 value) {
  set_has_server_max_online();
  server_max_online_ = value;
}

// optional int32 server_cur_count = 6;
inline bool SeverStateReport::has_server_cur_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SeverStateReport::set_has_server_cur_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SeverStateReport::clear_has_server_cur_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SeverStateReport::clear_server_cur_count() {
  server_cur_count_ = 0;
  clear_has_server_cur_count();
}
inline ::google::protobuf::int32 SeverStateReport::server_cur_count() const {
  return server_cur_count_;
}
inline void SeverStateReport::set_server_cur_count(::google::protobuf::int32 value) {
  set_has_server_cur_count();
  server_cur_count_ = value;
}

// optional int32 server_state = 7;
inline bool SeverStateReport::has_server_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SeverStateReport::set_has_server_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SeverStateReport::clear_has_server_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SeverStateReport::clear_server_state() {
  server_state_ = 0;
  clear_has_server_state();
}
inline ::google::protobuf::int32 SeverStateReport::server_state() const {
  return server_state_;
}
inline void SeverStateReport::set_server_state(::google::protobuf::int32 value) {
  set_has_server_state();
  server_state_ = value;
}

// optional int32 server_type = 8;
inline bool SeverStateReport::has_server_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SeverStateReport::set_has_server_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SeverStateReport::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SeverStateReport::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::google::protobuf::int32 SeverStateReport::server_type() const {
  return server_type_;
}
inline void SeverStateReport::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SGFMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SGFMsgBase_2eproto__INCLUDED
